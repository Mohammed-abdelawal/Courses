# Generated by Django 3.0.6 on 2020-05-08 03:52

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import website.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=255, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=255, verbose_name='Last Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active ?')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Is Staff ?')),
                ('is_instructor', models.BooleanField(default=False, verbose_name='Is Instructor ?')),
                ('about', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone')),
                ('is_male', models.BooleanField(choices=[(True, 'Male'), (False, 'Female')], default=True, verbose_name='Gender')),
                ('birthdate', models.DateField(blank=True, null=True, validators=[website.models.birth_validator], verbose_name='Birth date')),
                ('country', models.CharField(blank=True, max_length=30, null=True, verbose_name='Country')),
                ('city', models.CharField(blank=True, max_length=30, null=True, verbose_name='City')),
                ('pic', models.ImageField(blank=True, null=True, upload_to=website.models.uuid_path, verbose_name='Personal Pic')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category name')),
                ('slug', models.SlugField(unique=True, verbose_name='slug in url')),
                ('desc', models.TextField(verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True, verbose_name='slug for url')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('time', models.IntegerField(verbose_name='Full course time in Hours')),
                ('pub_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Publish Date')),
                ('files', models.FileField(blank=True, null=True, upload_to='CF', verbose_name='Attached Files in Zip and named\n                               as course title')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Is Approved By Admin ?')),
                ('intro_text', models.TextField(verbose_name='Course Text introduction')),
                ('intro_video', models.URLField(help_text='This should be embed YouTube link', verbose_name='introduction video')),
                ('before', models.TextField(help_text='What student should know about before enroll in course', verbose_name='Before the course')),
                ('after', models.TextField(help_text='What student can do after', verbose_name='After the course')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='website.Category', verbose_name='Category')),
                ('instructor', models.ForeignKey(limit_choices_to={'is_instructor': True}, on_delete=django.db.models.deletion.PROTECT, related_name='courses_instructor', to=settings.AUTH_USER_MODEL, verbose_name='The Instructor')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['pub_date'],
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('website', models.URLField(verbose_name='Website')),
                ('after', models.TextField(verbose_name='After Link')),
                ('before', models.TextField(verbose_name='Before Link')),
            ],
            options={
                'verbose_name': 'Host',
                'verbose_name_plural': 'Hosts',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='CAPITAL chars', max_length=50, unique=True, verbose_name='Language')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('text', models.TextField(verbose_name='Lesson Text')),
                ('video', models.URLField(help_text='embeded video link', verbose_name='Video Link')),
                ('arrange', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1, "Arrange start at '1'")], verbose_name='Arrange in Unit')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='website.Host', verbose_name='Host')),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Level name', max_length=50, unique=True, verbose_name='Level')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
            },
        ),
        migrations.CreateModel(
            name='NewsTeller',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('is_subscribe', models.BooleanField(default=True, verbose_name='is Subscribe')),
            ],
            options={
                'verbose_name': 'News Teller Subscriber',
                'verbose_name_plural': 'NewsTeller Subscriber',
            },
        ),
        migrations.CreateModel(
            name='NewsTeller_Emails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.TextField(verbose_name='MSG')),
                ('subject', models.CharField(max_length=100, verbose_name='Subject')),
            ],
            options={
                'verbose_name': 'NewsTeller Email',
                'verbose_name_plural': 'NewsTeller Emails',
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255, verbose_name='Choice Question')),
                ('answer', models.CharField(max_length=255, verbose_name='True answer')),
                ('ch1', models.CharField(blank=True, max_length=255, null=True, verbose_name='False 1')),
                ('ch2', models.CharField(blank=True, max_length=255, null=True, verbose_name='False 2')),
                ('ch3', models.CharField(blank=True, max_length=255, null=True, verbose_name='False 3')),
                ('ch4', models.CharField(blank=True, max_length=255, null=True, verbose_name='False 4')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Skill name')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Tag Name')),
                ('desc', models.TextField(verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='The name')),
                ('desc', models.TextField(verbose_name='Description')),
                ('arrange', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1, "Arrange start at '1'")], verbose_name='Unit Arrange')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='website.Course', verbose_name='Course')),
            ],
            options={
                'verbose_name': 'Unit',
                'verbose_name_plural': 'Units',
                'unique_together': {('arrange', 'course')},
            },
        ),
        migrations.CreateModel(
            name='Rel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rel_type', models.IntegerField(choices=[(1, 'ENROLLMENT'), (2, 'FINISHED')], default=1)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Rating')),
                ('feedback', models.CharField(blank=True, max_length=255, null=True, verbose_name='Review')),
                ('join_date', models.DateTimeField(auto_now_add=True, verbose_name='Join Date')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='details', to='website.Course')),
                ('lessons_attended', models.ManyToManyField(related_name='attend', to='website.Lesson')),
                ('quizzes_solved', models.ManyToManyField(related_name='solve', to='website.Quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='quiz',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='website.Unit', verbose_name='Unit'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='website.Unit', verbose_name='Unit'),
        ),
        migrations.AddField(
            model_name='course',
            name='language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='website.Language', verbose_name='Language'),
        ),
        migrations.AddField(
            model_name='course',
            name='level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='website.Level', verbose_name='Level'),
        ),
        migrations.AddField(
            model_name='course',
            name='skills_covered',
            field=models.ManyToManyField(related_name='courses', to='website.Skill', verbose_name='Skiils Covered in Course'),
        ),
        migrations.AddField(
            model_name='course',
            name='tags',
            field=models.ManyToManyField(related_name='courses', to='website.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='user',
            name='courses',
            field=models.ManyToManyField(related_name='students', through='website.Rel', to='website.Course'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='lesson',
            unique_together={('arrange', 'unit')},
        ),
    ]
